name: CICD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          chmod 777 ./mvnw
          ./mvnw clean package -Dmaven.test.skip=true

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}:8086/env")
          if [ "$STATUS" -eq 200 ]; then
            CURRENT_UPSTREAM=blue
          elif [ "$(curl -o /dev/null -s -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}:8087/env")" -eq 200 ]; then
            CURRENT_UPSTREAM=green
          else
            echo "No active upstream found"
            exit 1
          fi
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV

          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=8086" >> $GITHUB_ENV
            echo "STOPPED_PORT=8087" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ "$CURRENT_UPSTREAM" = "green" ]; then
            echo "CURRENT_PORT=8087" >> $GITHUB_ENV
            echo "STOPPED_PORT=8086" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
          
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest
            sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d

      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{ env.CURRENT_PORT }}/env
          max-attempts: 3
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c '
              echo "set \$service_url http://${{ secrets.LIVE_SERVER_IP }}:${{ env.CURRENT_PORT }};" > /etc/nginx/conf.d/service-env.inc
              nginx -s reload
            '

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            if sudo docker ps -a --format '{{.Names}}' | grep -q "${{ env.CURRENT_UPSTREAM }}"; then
              echo "Stopping container: ${{ env.CURRENT_UPSTREAM }}"
              sudo docker stop ${{ env.CURRENT_UPSTREAM }}
              sudo docker rm ${{ env.CURRENT_UPSTREAM }}
            else
              echo "Container not found for ${{ env.CURRENT_UPSTREAM }}"
            fi
